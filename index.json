{
  "matrices": [
    {
      "title": "Issuers - BitstringStatusList",
      "ctx": null,
      "suites": [
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [
            {
              "title": "BitstringStatusList Entry",
              "ctx": null,
              "suites": [],
              "tests": [
                {
                  "type": "test",
                  "title": "Any expression of the data model in this section MUST be expressed in a conforming verifiable credential as defined in [VC-DATA-MODEL-2.0].",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=Any%20expression%20of%20the%20data%20model%20in%20this%20section%20MUST%20be%20expressed%20in%20a%20conforming%20verifiable%20credential%20as%20defined%20in%20%5BVC%2DDATA%2DMODEL%2D2.0%5D.';\n            should.exist(issuerResponse,\n              'Expected an issuer response.');\n            should.not.exist(err,\n              'Expected no errors in the issuer response.');\n            issuerResponse.status.should.equal(201,\n              'Expected response http code 201.');\n            should.exist(issuedVc, `Expected VC from ${issuerName} to exist.`);\n            testCredential({credential: issuedVc});\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:e13c626c-c8ce-4c54-80fa-8f1fbde05ad0",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=Any%20expression%20of%20the%20data%20model%20in%20this%20section%20MUST%20be%20expressed%20in%20a%20conforming%20verifiable%20credential%20as%20defined%20in%20%5BVC%2DDATA%2DMODEL%2D2.0%5D.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 603,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "If present, the id value is expected to be a URL that identifies the status information associated with the verifiable credential. It MUST NOT be the URL for the status list.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20present%2C%20the%20value%20is%20expected%20to%20be%20a%20URL%20that%20identifies%20the%20status%20information%20associated%20with%20the%20verifiable%20credential.';\n            if(!!issuedVc.credentialStatus.id) {\n              // TODO test for URI\n              issuedVc.credentialStatus.id.should.be.a('string',\n                'Expected credentialStatus.id to be a string.'\n              );\n            } else {\n              this.skip();\n            }\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": true,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:cb1967df-390b-406a-a47c-4f2445b5556a",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20present%2C%20the%20value%20is%20expected%20to%20be%20a%20URL%20that%20identifies%20the%20status%20information%20associated%20with%20the%20verifiable%20credential.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 604,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 0,
                  "state": "pending"
                },
                {
                  "type": "test",
                  "title": "The type property MUST be BitstringStatusListEntry. ",
                  "body": "async function() {\n              this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20type%20property%20MUST%20be%20BitstringStatusListEntry.';\n              issuedVc.credentialStatus.should.have.own.property(\n                'type').to.be.a('string',\n                'Expected credentialStatus.type to be a string.'\n              );\n              issuedVc.credentialStatus.type.should.equal(\n                'BitstringStatusListEntry',\n                'Expected credentialStatus.type to be BitstringStatusListEntry.'\n              );\n            }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:70376153-75d4-44d1-9006-e9135ebff0b2",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20type%20property%20MUST%20be%20BitstringStatusListEntry.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 604,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The purpose of the status entry MUST be a string.",
                  "body": "async function() {\n              this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20purpose%20of%20the%20status%20entry%20MUST%20be%20a%20string';\n              issuedVc.credentialStatus.should.have.own.property(\n                'statusPurpose').to.be.a('string',\n                'Expected credentialStatus.statusPurpose to be a string.'\n              );\n            }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:d6169762-cd96-4300-b2a1-0bab5e12e40d",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20purpose%20of%20the%20status%20entry%20MUST%20be%20a%20string",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 605,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The statusListIndex property MUST be an arbitrary size integer greater than or equal to 0, expressed as a string in base 10.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20statusListIndex%20property%20MUST%20be%20an%20arbitrary%20size%20integer%20greater%20than%20or%20equal%20to%200%2C%20expressed%20as%20a%20string%20in%20base%2010';\n            issuedVc.credentialStatus.should.have.own.property(\n              'statusListIndex').to.be.a('string',\n              'Expected statusListIndex to be a string.'\n            );\n            assert(\n              String(parseInt(issuedVc.credentialStatus.statusListIndex)) ===\n              issuedVc.credentialStatus.statusListIndex,\n              'Expected statusSize value to be an integer ' +\n              'expressed as a string in base 10.'\n            );\n            parseInt(issuedVc.credentialStatus.statusListIndex).should.be.gte(0,\n              'Expected credentialStatus.statusListIndex to be >= 0.');\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:f25b82ae-6892-41ae-b2bc-c7fee1f9c8e4",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20statusListIndex%20property%20MUST%20be%20an%20arbitrary%20size%20integer%20greater%20than%20or%20equal%20to%200%2C%20expressed%20as%20a%20string%20in%20base%2010",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 606,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 1,
                  "state": "failed",
                  "err": {
                    "name": "AssertionError",
                    "message": "Expected statusListIndex to be a string.: expected 177985 to be a string",
                    "showDiff": false,
                    "actual": 177985,
                    "operator": "strictEqual",
                    "stack": "AssertionError: Expected statusListIndex to be a string.: expected 177985 to be a string\n    at Context.<anonymous> (file:///home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js:101:40)\n    at process.processImmediate (node:internal/timers:483:21)"
                  }
                },
                {
                  "type": "test",
                  "title": "The statusListCredential property MUST be a URL to a verifiable credential.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20statusListCredential%20property%20MUST%20be%20a%20URL%20to%20a%20verifiable%20credential.';\n            // TODO check for URI\n            issuedVc.credentialStatus.should.have.own.\n              property('statusListCredential').to.be.\n              a('string',\n                'Expected credentialStatus.statusListCredential to be a URL.'\n              );\n            const {slc} = await getSlc({issuedVc});\n            should.exist(slc,\n              'Expected statusListCredential to resolve to a ' +\n              'Verifiable Credential');\n            testSlCredential({slCredential: slc});\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:2b4c9e4a-5716-489c-b51e-3952409a70af",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20statusListCredential%20property%20MUST%20be%20a%20URL%20to%20a%20verifiable%20credential.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 609,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 145,
                  "state": "passed",
                  "speed": "slow"
                },
                {
                  "type": "test",
                  "title": "When the URL is dereferenced, the resulting verifiable credential MUST have type property that includes the BitstringStatusListCredential value.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=When%20the%20URL%20is%20dereferenced%2C%20the%20resulting%20verifiable%20credential%20MUST%20have%20type%20property%20that%20includes%20the%20BitstringStatusListCredential%20value.';\n            const {slc} = await getSlc({issuedVc});\n            slc.should.have.own.\n              property('type').to.be.\n              an('array',\n                'Expected type to be an array.'\n              );\n            slc.type.should.include(\n              'BitstringStatusListCredential',\n              'Expected type to be BitstringStatusListCredential.'\n            );\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:4c9bbc3e-9621-40a1-988a-50579620fc4b",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=When%20the%20URL%20is%20dereferenced%2C%20the%20resulting%20verifiable%20credential%20MUST%20have%20type%20property%20that%20includes%20the%20BitstringStatusListCredential%20value.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 755,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "statusSize MAY be provided.",
                  "body": "async function() {\n              this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=statusSize%20MAY%20be%20provided.';\n              if('statusSize' in issuedVc.credentialStatus) {\n                it('If present, ' +\n                  'statusSize MUST be an integer greater than zero.',\n                async function() {\n                  this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20present%2C%20statusSize%20MUST%20be%20an%20integer%20greater%20than%20zero.';\n                  issuedVc.credentialStatus.statusSize.should.be.a('number',\n                    'Expected statusSize to be an integer.');\n                  // TODO test for integer\n                  assert(Number.isInteger(\n                    issuedVc.credentialStatus.statusSize),\n                  'Expected statusSize to be an integer.');\n                  issuedVc.credentialStatus.statusSize.should.be.gt(0,\n                    'Expected statusSize to be greater than zero.');\n                });\n                if(Number.isInteger(issuedVc.credentialStatus.statusSize) &&\n                  issuedVc.credentialStatus.statusSize.gt(1)) {\n                  it('If statusSize is provided and is greater than 1, ' +\n                    'then the property credentialStatus.statusMessage ' +\n                    'MUST be present.',\n                  async function() {\n                    this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20statusSize%20is%20provided%20and%20is%20greater%20than%201%2C%20then%20the%20property%20credentialStatus.statusMessage%20MUST%20be%20present';\n                    issuedVc.credentialStatus.should.have.own.property(\n                      'statusMessage');\n                  });\n                }\n                it('The number of status messages MUST equal the number ' +\n                  'of possible values.',\n                async function() {\n                  this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=the%20number%20of%20status%20messages%20MUST%20equal%20the%20number%20of%20possible%20values';\n                  issuedVc.credentialStatus.statusSize.should.be.\n                    an('array').length.should.be.\n                    equal(issuedVc.credentialStatus.statusSize);\n                });\n                if(issuedVc.credentialStatus.statusMessage) {\n                  it('If present, the statusMessage property MUST be an ' +\n                    'array, the length of which MUST equal the number ' +\n                    'of possible status messages indicated by statusSize.',\n                  async function() {\n                    this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20present%2C%20the%20statusMessage%20property%20MUST%20be%20an%20array%2C%20the%20length%20of%20which%20MUST%20equal%20the%20number%20of%20possible%20status%20messages%20indicated%20by%20statusSize';\n                    issuedVc.credentialStatus.statusMessage.should.be.\n                      an('array').length.should.be.\n                      equal(issuedVc.credentialStatus.statusSize,\n                        'Expected statusMessage lenght to be equal to ' +\n                        'statusSize.');\n                  });\n                }\n                if(Number.isInteger(issuedVc.credentialStatus.statusSize) &&\n                issuedVc.credentialStatus.statusSize.gt(1)) {\n                  it('statusMessage MAY be present if statusSize is 1, ' +\n                  'and MUST be present if statusSize is greater than 1.',\n                  async function() {\n                    this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=statusMessage%20MAY%20be%20present%20if%20statusSize%20is%201%2C%20and%20MUST%20be%20present%20if%20statusSize%20is%20greater%20than%201';\n                    issuedVc.credentialStatus.should.have.own.property(\n                      'statusMessage');\n                  });\n                }\n                it('If the statusMessage array is present, each ' +\n                  'element MUST contain the two properties \"status\" ' +\n                  'and \"message\".',\n                async function() {\n                  this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20the%20statusMessage%20array%20is%20present%2C%20each%20element%20MUST%20contain%20the%20two%20properties%20described%20below%2C%20and%20MAY%20contain%20additional%20properties.';\n                  // TODO this needs more testing:\n                  // a string representing the hexadecimal\n                  // value of the status prefixed with 0x\n                  const statusMessage = issuedVc.credentialStatus.statusMessage;\n                  statusMessage.should.each.have.property(\n                    'status').that.is.a('string');\n                  statusMessage.should.each.have.property(\n                    'message').that.is.a('string');\n                });\n              } else {\n                it.skip('If statusSize is not present as a property ' +\n                  'of the credentialStatus, then statusSize MUST ' +\n                  'be processed as 1.',\n                async function() {\n                  this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20statusSize%20is%20not%20present%20as%20a%20property%20of%20the%20credentialStatus%2C%20then%20statusSize%20MUST%20be%20processed%20as%201.';\n                }\n                );\n              }\n            }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:72e0c6cc-e6e2-4434-b429-7f142579da39",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=statusSize%20MAY%20be%20provided.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 760,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "An implementer MAY include the statusReference property.",
                  "body": "async function() {\n              this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=An%20implementer%20MAY%20include%20the%20statusReference%20property.';\n              if('statusReference' in issuedVc.credentialStatus) {\n                it('If present, its value MUST be a URL or an array of URLs ' +\n                    '[URL] which dereference(s) to material related to the ' +\n                    'status.',\n                async function() {\n                  this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=If%20present%2C%20its%20value%20MUST%20be%20a%20URL%20or%20an%20array%20of%20URLs%20%5BURL%5D%20which%20dereference%20to%20material%20related%20to%20the%20status';\n                  const statusReferenceType = typeof (\n                    issuedVc.credentialStatus.statusReference);\n                  statusReferenceType.should.be.oneOf(['string', 'object'],\n                    'Expected statusReference to be an string or an array.');\n                  if(statusReferenceType === 'object') {\n                    issuedVc.credentialStatus.statusReference.should.be.an(\n                      'array');\n                    issuedVc.credentialStatus.statusReference.forEach(\n                      item => item.should.be.a('string'));\n                  }\n                  // TODO test for URLS\n                });\n              } else {\n                this.skip();\n              }\n            }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": true,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "-EODC3pyzoP9EXDAGV4vt",
                  "ctx": null,
                  "_testId": "urn:uuid:1cbaca04-33d0-43e2-84af-79f806ad44f3",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=An%20implementer%20MAY%20include%20the%20statusReference%20property.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 760,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 0,
                  "state": "pending"
                }
              ],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "3wq4eGfW3GeCmWDnVvLbx",
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
              "_testId": "urn:uuid:33c1c381-c333-4c26-943f-47021d2d2c04"
            },
            {
              "title": "BitstringStatusList Credential",
              "ctx": null,
              "suites": [],
              "tests": [
                {
                  "type": "test",
                  "title": "When a status list verifiable credential is published, it MUST be a conforming document, as defined in [VC-DATA-MODEL-2.0].",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=When%20a%20status%20list%20verifiable%20credential%20is%20published%2C%20it%20MUST%20be%20a%20conforming%20document%2C%20as%20defined%20in%20%5BVC%2DDATA%2DMODEL%2D2.0%5D';\n            testSlCredential({slCredential: statusListCredential},\n              'Expected status credential to conform to VCDM 2.0.');\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "_testId": "urn:uuid:05aac384-5f9a-47bc-b4f2-ca3b58a10088",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=When%20a%20status%20list%20verifiable%20credential%20is%20published%2C%20it%20MUST%20be%20a%20conforming%20document%2C%20as%20defined%20in%20%5BVC%2DDATA%2DMODEL%2D2.0%5D",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 765,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The verifiable credential that contains the status list MAY express an id property that matches the value specified in statusListCredential for the corresponding BitstringStatusListEntry.",
                  "body": "",
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": true,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "state": "pending"
                },
                {
                  "type": "test",
                  "title": "The verifiable credential that contains the status list MUST express a type property that includes the BitstringStatusListCredential value.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20verifiable%20credential%20that%20contains%20the%20status%20list%20MUST%20express%20a%20type%20property%20that%20includes%20the%20BitstringStatusListCredential%20value.';\n            statusListCredential.should.have.own.property(\n              'type').to.be.an('array',\n              'Expected type property to be a string or an array.'\n            );\n            statusListCredential.type.should.include(\n              'BitstringStatusListCredential',\n              'Expected credential status type to include ' +\n              'BitstringStatusListCredential.');\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "_testId": "urn:uuid:8d1ed3ae-fb94-4d02-a8d6-ff7da74da15b",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20verifiable%20credential%20that%20contains%20the%20status%20list%20MUST%20express%20a%20type%20property%20that%20includes%20the%20BitstringStatusListCredential%20value.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 766,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The type of the credential subject, which is the status list, MUST be BitstringStatusList.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20type%20of%20the%20credential%20subject%2C%20which%20is%20the%20status%20list%2C%20MUST%20be%20BitstringStatusList.';\n            statusListCredential.credentialSubject.should.have.own.property(\n              'type').to.be.a('string',\n              'Expected type property to be a string.'\n            );\n            statusListCredential.credentialSubject.type.should.equal(\n              'BitstringStatusList',\n              'Expected credential status type to be ' +\n              'BitstringStatusList.'\n            );\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "_testId": "urn:uuid:4eed980e-30a0-4d31-ae41-a2ef37c288d5",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20type%20of%20the%20credential%20subject%2C%20which%20is%20the%20status%20list%2C%20MUST%20be%20BitstringStatusList.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 766,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The value of the purpose property of the status entry, statusPurpose, MUST be one or more strings.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20value%20of%20the%20purpose%20property%20of%20the%20status%20entry%2C%20statusPurpose%2C%20MUST%20be%20one%20or%20more%20strings.';\n            const statusPurposeType = typeof (\n              statusListCredential.credentialSubject.statusPurpose);\n            statusPurposeType.should.be.oneOf(['string', 'object']);\n            if(statusPurposeType === 'object') {\n              const credentialSubject = statusListCredential.credentialSubject;\n              credentialSubject.statusPurpose.should.be.an(\n                'array');\n              credentialSubject.statusPurpose.forEach(\n                item => item.should.be.a('string'));\n            }\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "_testId": "urn:uuid:924df580-5aae-4264-b87d-6ada4c7ed3c9",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20value%20of%20the%20purpose%20property%20of%20the%20status%20entry%2C%20statusPurpose%2C%20MUST%20be%20one%20or%20more%20strings.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 766,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The encodedList property of the credential subject MUST be a Multibase-encoded base64url (with no padding) [RFC4648] representation of the GZIP-compressed [RFC1952] bitstring values for the associated range of verifiable credential status values.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20encodedList%20property%20of%20the%20credential%20subject%20MUST%20be%20a%20Multibase%2Dencoded%20base64url%20(with%20no%20padding)%20%5BRFC4648%5D%20representation%20of%20the%20GZIP%2Dcompressed%20%5BRFC1952%5D%20bitstring%20values%20for%20the%20associated%20range%20of%20verifiable%20credential%20status%20values.';\n            const {slc: {credentialSubject}} = await getSlc({issuedVc});\n            const {encodedList} = credentialSubject;\n            // Uncompress encodedList\n            const decoded = await sl.decodeList({encodedList});\n            should.exist(decoded,\n              'Expected encodedList to be a Multibase-encoded base64url' +\n              'representation of a GZIP-compressed bitstring.');\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "_testId": "urn:uuid:0147896b-e98d-4266-8a0f-ca10001ca216",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20encodedList%20property%20of%20the%20credential%20subject%20MUST%20be%20a%20Multibase%2Dencoded%20base64url%20(with%20no%20padding)%20%5BRFC4648%5D%20representation%20of%20the%20GZIP%2Dcompressed%20%5BRFC1952%5D%20bitstring%20values%20for%20the%20associated%20range%20of%20verifiable%20credential%20status%20values.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 767,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The uncompressed bitstring MUST be at least 16KB in size.",
                  "body": "async function() {\n              this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20uncompressed%20bitstring%20MUST%20be%20at%20least%2016KB%20in%20size.';\n              const {slc: {credentialSubject}} = await getSlc({issuedVc});\n              const {encodedList} = credentialSubject;\n              // Uncompress encodedList\n              const decoded = await sl.decodeList({encodedList});\n              should.exist(decoded);\n              // decoded size should be 16kb\n              const decodedSize = (decoded.length / 8) / 1024;\n              decodedSize.should.be.gte(16,\n                'Expected bitstring to be at least 16KB in size.'\n              );\n            }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "_testId": "urn:uuid:1a1e2070-b50b-4457-934d-53ea041f8a02",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20uncompressed%20bitstring%20MUST%20be%20at%20least%2016KB%20in%20size.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 776,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast"
                },
                {
                  "type": "test",
                  "title": "The bitstring MUST be encoded such that the first index, with a value of zero (0), is located at the left-most bit in the bitstring and the last index, with a value of one less than the length of the bitstring (bitstring_length - 1), is located at the right-most bit in the bitstring.",
                  "body": "async function() {\n            this.test.link = 'https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20bitstring%20MUST,Bitstring%20Encoding.';\n            const {slc: {credentialSubject}} = await getSlc({issuedVc});\n            const {encodedList} = credentialSubject;\n            const decoded = await sl.decodeList({encodedList});\n            decoded.bitstring.bits[0].should.be.equal(0);\n            decoded.bitstring.bits[\n              decoded.bitstring.bits.length - 1].should.be.equal(0);\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "_testId": "urn:uuid:62f23629-38ac-4542-854c-c6d10fe6d756",
                  "_events": {},
                  "_eventsCount": 1,
                  "link": "https://www.w3.org/TR/vc-bitstring-status-list/#:~:text=The%20bitstring%20MUST,Bitstring%20Encoding.",
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 781,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast"
                }
              ],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [
                {
                  "title": "\"before all\" hook in \"BitstringStatusList Credential\"",
                  "body": "async function() {\n            statusListCredential = (await getSlc({issuedVc})).slc;\n          }",
                  "async": 0,
                  "sync": true,
                  "_timeout": 15000,
                  "_slow": 75,
                  "_retries": -1,
                  "timedOut": false,
                  "_currentRetry": 0,
                  "pending": false,
                  "type": "hook",
                  "parent": "KkyqHP994m6V1L9n5v3kG",
                  "ctx": null,
                  "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
                  "originalTitle": "\"before all\" hook",
                  "_events": {},
                  "_eventsCount": 1,
                  "timer": {
                    "_idleTimeout": -1,
                    "_idlePrev": null,
                    "_idleNext": null,
                    "_idleStart": 760,
                    "_onTimeout": null,
                    "_repeat": null,
                    "_destroyed": true
                  },
                  "duration": 4,
                  "_error": null
                }
              ],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "3wq4eGfW3GeCmWDnVvLbx",
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
              "_testId": "urn:uuid:14b0888e-ee91-4c1e-b87b-bd1e0616bc63"
            }
          ],
          "tests": [],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Open Security and Identity\"",
              "body": "function() {\n          this.test.cell = {\n            columnId: issuerName, rowId: this.test.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "3wq4eGfW3GeCmWDnVvLbx",
              "ctx": null,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "\"before each\" hook for \"The bitstring MUST be encoded such that the first index, with a value of zero (0), is located at the left-most bit in the bitstring and the last index, with a value of one less than the length of the bitstring (bitstring_length - 1), is located at the right-most bit in the bitstring.\""
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Open Security and Identity\"",
              "body": "async function() {\n          const issuer = issuers.find(\n            issuer => issuer.tags.has('BitstringStatusList'));\n          const {result, error, data} = await issueVc({issuer});\n          err = error;\n          issuerResponse = result;\n          issuedVc = data;\n          if(typeof (issuedVc.credentialStatus) === 'object') {\n            // TODO make everything an array and test each status entry\n            // issuedVc.credentialStatus = [issuedVc.credentialStatus]\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "3wq4eGfW3GeCmWDnVvLbx",
              "ctx": null,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 349,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 249,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1ioKXDoNIQjIBGbhCJzB-",
          "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
          "_testId": "urn:uuid:dd61887f-662b-4f9d-b1be-00b629517fd9"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "XkCFwFWhL_IW8gxEGKNqN",
      "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/10-issue.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:23cc868d-6a45-4fea-a56f-1cbe965b7d8a",
      "columns": [
        "Open Security and Identity"
      ],
      "rows": []
    },
    {
      "title": "BitstringStatusList Credentials (Verify)",
      "ctx": null,
      "suites": [
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid \"BitstringStatusListCredential\" with \"revocation\" status purpose",
              "body": "async function() {\n        this.test.cell = {columnId: verifierName, rowId: this.test.title};\n        const {result, error, statusCode} = await verifier.post({\n          json: createRequestBody({vc: validVcForRevocation})\n        });\n        shouldPassVerification({result, error, statusCode});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
              "parent": "B2UATJvVSPxUCfYT9VhpR",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST verify a valid \"BitstringStatusListCredential\" with \"suspension\" status purpose",
              "body": "async function() {\n        this.test.cell = {columnId: verifierName, rowId: this.test.title};\n        const {result, error, statusCode} = await verifier.post({\n          json: createRequestBody({vc: validVcForSuspension})\n        });\n        shouldPassVerification({result, error, statusCode});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
              "parent": "B2UATJvVSPxUCfYT9VhpR",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST fail to verify a VC with invalid \"credentialStatus.statusListCredential\"",
              "body": "async function() {\n        this.test.cell = {columnId: verifierName, rowId: this.test.title};\n        const invalidStatusListCredential = klona(validVcForRevocation);\n        invalidStatusListCredential.credentialStatus.statusListCredential =\n          'invalid-statusListCredential';\n        const {result, error, statusCode} = await verifier.post({\n          json: createRequestBody({vc: invalidStatusListCredential})\n        });\n        shouldFailVerification({result, error, statusCode});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
              "parent": "B2UATJvVSPxUCfYT9VhpR",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST fail to verify a VC with invalid \"credentialStatus.type\"",
              "body": "async function() {\n          this.test.cell = {columnId: verifierName, rowId: this.test.title};\n          const invalidCredentialStatusType = klona(validVcForRevocation);\n          invalidCredentialStatusType.credentialStatus.type = 'invalid-type';\n          const {result, error, statusCode} = await verifier.post({\n            json: createRequestBody({vc: invalidCredentialStatusType})\n          });\n          shouldFailVerification({result, error, statusCode});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
              "parent": "B2UATJvVSPxUCfYT9VhpR",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST fail to verify a revoked status list credential",
              "body": "async function() {\n          this.test.cell = {columnId: verifierName, rowId: this.test.title};\n          // get the status of the VC\n          const statusInfo = await getCredentialStatus({\n            verifiableCredential: validVcForRevocation\n          });\n          statusInfo.status.should.equal(false);\n          // verification of the credential should pass\n          const {result, error, statusCode} = await verifier.post({\n            json: createRequestBody({vc: validVcForRevocation})\n          });\n          shouldPassVerification({result, error, statusCode});\n          // update the status of the VC and revoke it\n          const revokedVc = await updateStatus({\n            vc: validVcForRevocation, setStatusList: setRevocationStatusList,\n            publishStatusList: publishRevocationStatusList, statusInfo,\n            statusPurpose: 'revocation'\n          });\n          // try to verify the credential after revocation, should fail since it\n          // has now been revoked\n          const {\n            result: result2, error: err2, statusCode: statusCode2\n          } = await verifier.post({\n            json: createRequestBody({vc: revokedVc})\n          });\n          shouldFailVerification({\n            result: result2, error: err2, statusCode: statusCode2\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
              "parent": "B2UATJvVSPxUCfYT9VhpR",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST fail to verify a suspended status list credential",
              "body": "async function() {\n          this.test.cell = {columnId: verifierName, rowId: this.test.title};\n          // get the status of the VC\n          const statusInfo = await getCredentialStatus({\n            verifiableCredential: validVcForSuspension\n          });\n          statusInfo.status.should.equal(false);\n          // verification of the credential should pass\n          const {result, error, statusCode} = await verifier.post({\n            json: createRequestBody({vc: validVcForSuspension})\n          });\n          shouldPassVerification({result, error, statusCode});\n          // update the status of the VC and suspend it\n          const suspendedVc = await updateStatus({\n            vc: validVcForSuspension, setStatusList: setSuspensionStatusList,\n            publishStatusList: publishSuspensionStatusList, statusInfo,\n            statusPurpose: 'suspension'\n          });\n          // try to verify the credential after suspension, should fail since it\n          // has now been suspended\n          const {\n            result: result2, error: err2, statusCode: statusCode2\n          } = await verifier.post({\n            json: createRequestBody({vc: suspendedVc})\n          });\n          shouldFailVerification({\n            result: result2, error: err2, statusCode: statusCode2\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
              "parent": "B2UATJvVSPxUCfYT9VhpR",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid \"BitstringStatusListCredential\" with \"revocation\" status purpose\"",
              "body": "async function() {\n        // get a VC issued by DB\n        const {match} = filterImplementations({filter: ({value}) => {\n          // FIXME: Make issuer name configurable via env variable\n          return value.settings.name === 'Digital Bazaar';\n        }});\n        const res = match.get('Digital Bazaar');\n        const {issuers, setStatusLists, publishStatusLists} = res;\n        setRevocationStatusList = setStatusLists.find(\n          issuer => issuer.tags.has('Revocation'));\n        setSuspensionStatusList = setStatusLists.find(\n          issuer => issuer.tags.has('Suspension'));\n        publishRevocationStatusList = publishStatusLists.find(\n          issuer => issuer.tags.has('Revocation'));\n        publishSuspensionStatusList = publishStatusLists.find(\n          issuer => issuer.tags.has('Suspension'));\n        const issuer1 = issuers.find(issuer => issuer.tags.has('Revocation'));\n        const {data: data1} = await issueVc({issuer: issuer1});\n        validVcForRevocation = data1;\n        const issuer2 = issuers.find(issuer => issuer.tags.has('Suspension'));\n        const {data: data2} = await issueVc({issuer: issuer2});\n        validVcForSuspension = data2;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "B2UATJvVSPxUCfYT9VhpR",
              "ctx": null,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null,
              "state": "failed",
              "err": {}
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "tCKRt0nATrK9PmZZKAgNF",
          "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:1442fecb-28a2-4607-b53e-742d445c588a"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "XkCFwFWhL_IW8gxEGKNqN",
      "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/20-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:21b9a855-9bcd-4217-8392-8ba0a7ffb422",
      "columns": [
        "Open Security and Identity"
      ],
      "rows": []
    },
    {
      "title": "BitstringStatusList Credentials (Interop \"statusPurpose: revocation\")",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"BitstringStatusList Credentials (Interop \"statusPurpose: revocation\")\"",
          "body": "async function() {\n      const [issuer] = endpoints.filter(\n        endpoint => endpoint.settings.tags.includes('Revocation'));\n      issuedVc = issueVc({issuer});\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Imv-jqcUfPHiz5OFT2rem",
          "ctx": null,
          "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 787,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 0,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "XkCFwFWhL_IW8gxEGKNqN",
      "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/30-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:692c3584-025c-4db0-82e6-1dfd6991c24c",
      "columns": [
        "Open Security and Identity"
      ],
      "rows": [
        {
          "id": "Open Security and Identity",
          "cells": [
            {
              "type": "test",
              "title": "Open Security and Identity should verify Open Security and Identity",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const {data: vc, error: err} = await issuedVc;\n        should.not.exist(err);\n        should.exist(vc);\n        const body = createRequestBody({vc});\n        const {result, error, statusCode} = await verifier.post({json: body});\n        shouldPassVerification({result, error, statusCode});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/30-interop.js",
              "parent": "Imv-jqcUfPHiz5OFT2rem",
              "ctx": null,
              "_testId": "urn:uuid:377b6119-e927-489b-9e8b-2002a7aeb0a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Open Security and Identity",
                "columnId": "Open Security and Identity"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {}
            }
          ]
        }
      ]
    },
    {
      "title": "BitstringStatusList Credentials (Interop \"statusPurpose: suspension\")",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"BitstringStatusList Credentials (Interop \"statusPurpose: suspension\")\"",
          "body": "async function() {\n      const [issuer] = endpoints.filter(\n        endpoint => endpoint.settings.tags.includes('Suspension'));\n      issuedVc = issueVc({issuer});\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "4vgBtFZWHxY5qIiqiAkL1",
          "ctx": null,
          "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 788,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 0,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "XkCFwFWhL_IW8gxEGKNqN",
      "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/30-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:5de3e203-6eab-4a8d-9900-839e714eb9cd",
      "columns": [
        "Open Security and Identity"
      ],
      "rows": [
        {
          "id": "Open Security and Identity",
          "cells": [
            {
              "type": "test",
              "title": "Open Security and Identity should verify Open Security and Identity",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        const {data: vc, error: err} = await issuedVc;\n        should.not.exist(err);\n        should.exist(vc);\n        const body = createRequestBody({vc});\n        const {result, error, statusCode} = await verifier.post({json: body});\n        shouldPassVerification({result, error, statusCode});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-bitstring-status-list-test-suite/vc-bitstring-status-list-test-suite/tests/30-interop.js",
              "parent": "4vgBtFZWHxY5qIiqiAkL1",
              "ctx": null,
              "_testId": "urn:uuid:41e20963-b7d6-4477-a4ad-1e56840f251e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Open Security and Identity",
                "columnId": "Open Security and Identity"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {}
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-bitstring-status-list-test-suite",
    "subtitle": "Test Interoperability Report for Verifiable Credentials status",
    "github": "https://github.com/w3c-ccg/vc-bitstring-status-list-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/vc-bitstring-status-list-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "VC Bitstring List Interoperability Report 1.0",
  "stats": [
    "Tests passed 13/16 81%",
    "Tests failed 4/16 25%",
    "Failures 4",
    "Tests skipped 3",
    "Total tests 19"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}